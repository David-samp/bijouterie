security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers

    # ici on définit un encoder, on lui precise l'algorithm à utiliser pour le hashage et sur quelle entité il devra appliquer cet algorithm
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    # les providers permettent de preciser a symfony ou sont stocké les données a controler
    providers:
        in_database:
            entity:
                class: App\Entity\User

    # firewall=> quelle partie du site on va proteger et par quel moyen
    # on precise à symfony d'activer la protection par rapport à notre provider in_database
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: in_database

            form_login:
                login_path: login
                check_path: login

            logout:
                path: logout
                target: home

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
